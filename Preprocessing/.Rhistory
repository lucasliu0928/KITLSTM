curr_sample_data <- sample_data_list[[i]]
sample_stats[i,"Sample_NAME"]       <- paste0("Sample",i)
sample_stats[i,"GPA_Mean"]           <- compute_average(curr_sample_data,"GPA","Sample")
sample_stats[i,"Female_Proportion"] <- compute_proportion(curr_sample_data,"FEMALE","Sample")
}
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 0.4), linetype="solid",  color="yellow", size=2)  +
#geom_vline(aes(xintercept= 0.6), linetype="solid",  color="yellow", size=2)
}
sp_value <- sample_stats[5241,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/KG_TimeAware_LSTM/Preprocessing")
library("rjson")
change_name_func <- function(term_embed_df,name_col,old_name, new_name) {
idx <- which(term_embed_df[,name_col]== old_name)
if (length(idx) > 0 ){
term_embed_df[idx,name_col] <- paste0(new_name,"_",term_embed_df[idx,name_col])
}
return(term_embed_df)
}
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092021/Ontology_features/"
#Read embeddings from using 50000 triplets to train (V2)
embedding_output <- fromJSON(paste(readLines(paste0(data_dir,"TransE_Output/V2embedding.vec.json")), collapse=""))
ent_embedding <- embedding_output$ent_embeddings.weight
rel_embedding <- embedding_output$rel_embeddings.weight
#Get entity embedding ID file
entity_ID_df <- read.table(paste0(data_dir,"TransE_Input/entity2id.txt"),skip = 1)
colnames(entity_ID_df) <- c("HPO_ID","Embed_ID")
#Get relation embedding ID file
relation_ID_df <- read.table(paste0(data_dir,"TransE_Input/relation2id.txt"),skip = 1)
colnames(relation_ID_df) <- c("Relation_ID","Embed_ID")
#Get common ancestor data
common_ancestors_df <- read.csv(paste0(data_dir,"Commom_Ancestors/common_ancestors_df_Phenotypic_Abnormality.csv"),stringsAsFactors = F)
common_ancestors_df$ID1 <- gsub(":","",common_ancestors_df$ID1)
common_ancestors_df$ID2 <- gsub(":","",common_ancestors_df$ID2)
View(common_ancestors_df)
ghpo_dat<- get_ontology("/Users/lucasliu/Desktop/hp2.obo.txt",extract_tags = "everything")
#Match names and Ids with embed vector df
#Load HPO
library(ontologyIndex)
ghpo_dat<- get_ontology("/Users/lucasliu/Desktop/hp2.obo.txt",extract_tags = "everything")
#'@NOTE: HPO only have is_a relation
get_relation_names("/Users/lucasliu/Desktop/hp2.obo.txt")
#1. All terms in HPO
all_termsIDs_inHPO <- ghpo_dat$id
all_termsNames_inHPO <- ghpo_dat$name
#All ID and names
HPO_IDandnames <- cbind.data.frame(as.vector(all_termsNames_inHPO),as.vector(all_termsIDs_inHPO))
colnames(HPO_IDandnames) <- c("Name","ID")
View(HPO_IDandnames)
View(common_ancestors_df)
library("rjson")
change_name_func <- function(term_embed_df,name_col,old_name, new_name) {
idx <- which(term_embed_df[,name_col]== old_name)
if (length(idx) > 0 ){
term_embed_df[idx,name_col] <- paste0(new_name,"_",term_embed_df[idx,name_col])
}
return(term_embed_df)
}
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092021/Ontology_features/"
#Read embeddings from using 50000 triplets to train (V2)
embedding_output <- fromJSON(paste(readLines(paste0(data_dir,"TransE_Output/V2embedding.vec.json")), collapse=""))
ent_embedding <- embedding_output$ent_embeddings.weight
rel_embedding <- embedding_output$rel_embeddings.weight
#Get entity embedding ID file
entity_ID_df <- read.table(paste0(data_dir,"TransE_Input/entity2id.txt"),skip = 1)
colnames(entity_ID_df) <- c("HPO_ID","Embed_ID")
#Get relation embedding ID file
relation_ID_df <- read.table(paste0(data_dir,"TransE_Input/relation2id.txt"),skip = 1)
colnames(relation_ID_df) <- c("Relation_ID","Embed_ID")
#Get common ancestor data
common_ancestors_df <- read.csv(paste0(data_dir,"Commom_Ancestors/common_ancestors_df_Phenotypic_Abnormality.csv"),stringsAsFactors = F)
common_ancestors_df$ID1 <- gsub(":","",common_ancestors_df$ID1)
common_ancestors_df$ID2 <- gsub(":","",common_ancestors_df$ID2)
View(entity_ID_df)
library(Rtsne)
library("FactoMineR")
library("factoextra")
norm_minmax <- function(x){
(x- min(x,na.rm = T)) /(max(x,na.rm = T)-min(x,na.rm = T))
}
################################################################################
#Data dir
################################################################################
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092721/onRRT_analysis/sample_level_data/"
#data dir
data_dir1  <- paste0(proj_dir, "AVG_MAX_MIN_Feature/")
data_dir2  <- paste0(proj_dir, "static_features/")
outdir <- paste0(proj_dir,"/Z_PCA_data/")
########################################################################################################
#Load labels
########################################################################################################
label_df <- read.csv(paste0(proj_dir,"FinalIDs_spOutcome.csv"),stringsAsFactors = F)
avg_max_min_df <- read.csv(paste0(data_dir1,"All_AVGMAXMIN_onRRT_Imputed.csv"),stringsAsFactors = F)
static_df      <- read.csv(paste0(data_dir2,"samples_static_features_onRRT.csv"),stringsAsFactors = F)
#Inpute static with median
for (j in 3:ncol(static_df)){
curr_col <- static_df[,j]
na_indxes <- which(is.na(curr_col)==T)
if (length(na_indxes) > 0){
static_df[na_indxes,j] <- median(static_df[,j],na.rm = T)
}
}
#MAtch ID order
match_order <- match(avg_max_min_df[,"SAMPLE_ID"],static_df[,"SAMPLE_ID"])
comb_df <- cbind(static_df[match_order,-1],avg_max_min_df[,-1])
rownames(comb_df) <- comb_df$SAMPLE_ID
comb_df <- comb_df[,-1]
match_order2 <- match(label_df[,"SAMPLE_ID"],rownames(comb_df))
comb_df_withLabel <- cbind(comb_df,label_df[,c("sample_death_in24h")])
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)] <- "sample_death_in24h"
#remove duplicated rows for tSNE and PCA
comb_df_withLabel <- comb_df_withLabel[!duplicated(comb_df_withLabel[,-ncol(comb_df_withLabel)]),]
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
#Run PCA
res.pca <- PCA(input_df, graph = FALSE)
eig.val <- get_eigenvalue(res.pca)
####################################################################################################
#Add weighted sum scores for each sample, based on the contribution of top 7 features on Dim 1
####################################################################################################
top7_features_contribution_df  <- var_contribution[order(var_contribution[,"Dim.1"],decreasing = T)[1:7],]
#Get varaible contribution
var <- get_pca_var(res.pca)
var_contribution <- as.data.frame(var$contrib)
####################################################################################################
#Add weighted sum scores for each sample, based on the contribution of top 7 features on Dim 1
####################################################################################################
top7_features_contribution_df  <- var_contribution[order(var_contribution[,"Dim.1"],decreasing = T)[1:7],]
top7_features                  <- rownames(top7_features_contribution_df)
top7_features_contributions    <- top7_features_contribution_df[,"Dim.1"]
#Normalized feature values for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
colnames(normed_data) <- paste0("Normed_",colnames(normed_data))
comb_df_withLabel[,colnames(normed_data)] <- normed_data
#Compute weightes sum
comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] <- NA
library(Rtsne)
library("FactoMineR")
library("factoextra")
norm_minmax <- function(x){
(x- min(x,na.rm = T)) /(max(x,na.rm = T)-min(x,na.rm = T))
}
################################################################################
#Data dir
################################################################################
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092721/onRRT_analysis/sample_level_data/"
#data dir
data_dir1  <- paste0(proj_dir, "AVG_MAX_MIN_Feature/")
data_dir2  <- paste0(proj_dir, "static_features/")
outdir <- paste0(proj_dir,"/Z_PCA_data/")
########################################################################################################
#Load labels
########################################################################################################
label_df <- read.csv(paste0(proj_dir,"FinalIDs_spOutcome.csv"),stringsAsFactors = F)
########################################################################################################
#1. Load all stationary feature data
########################################################################################################
avg_max_min_df <- read.csv(paste0(data_dir1,"All_AVGMAXMIN_onRRT_Imputed.csv"),stringsAsFactors = F)
static_df      <- read.csv(paste0(data_dir2,"samples_static_features_onRRT.csv"),stringsAsFactors = F)
#Inpute static with median
for (j in 3:ncol(static_df)){
curr_col <- static_df[,j]
na_indxes <- which(is.na(curr_col)==T)
if (length(na_indxes) > 0){
static_df[na_indxes,j] <- median(static_df[,j],na.rm = T)
}
}
#MAtch ID order
match_order <- match(avg_max_min_df[,"SAMPLE_ID"],static_df[,"SAMPLE_ID"])
comb_df <- cbind(static_df[match_order,-1],avg_max_min_df[,-1])
rownames(comb_df) <- comb_df$SAMPLE_ID
comb_df <- comb_df[,-1]
match_order2 <- match(label_df[,"SAMPLE_ID"],rownames(comb_df))
comb_df_withLabel <- cbind(comb_df,label_df[,c("sample_death_in24h")])
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)] <- "sample_death_in24h"
#########################################################
#Input df, remove duplicated rows
#########################################################
#remove duplicated rows for tSNE and PCA
comb_df_withLabel <- comb_df_withLabel[!duplicated(comb_df_withLabel[,-ncol(comb_df_withLabel)]),]
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
View(input_df)
#Run PCA
res.pca <- PCA(input_df, graph = FALSE)
eig.val <- get_eigenvalue(res.pca)
View(eig.val)
#Get varaible contribution
var <- get_pca_var(res.pca)
var_contribution <- as.data.frame(var$contrib)
View(var_contribution)
print(p)
library(Rtsne)
library("FactoMineR")
library("factoextra")
norm_minmax <- function(x){
(x- min(x,na.rm = T)) /(max(x,na.rm = T)-min(x,na.rm = T))
}
################################################################################
#Data dir
################################################################################
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092721/onRRT_analysis/sample_level_data/"
#data dir
data_dir1  <- paste0(proj_dir, "AVG_MAX_MIN_Feature/")
data_dir2  <- paste0(proj_dir, "static_features/")
outdir <- paste0(proj_dir,"/Z_PCA_data/")
########################################################################################################
#Load labels
########################################################################################################
label_df <- read.csv(paste0(proj_dir,"FinalIDs_spOutcome.csv"),stringsAsFactors = F)
########################################################################################################
#1. Load all stationary feature data
########################################################################################################
avg_max_min_df <- read.csv(paste0(data_dir1,"All_AVGMAXMIN_onRRT_Imputed.csv"),stringsAsFactors = F)
static_df      <- read.csv(paste0(data_dir2,"samples_static_features_onRRT.csv"),stringsAsFactors = F)
#Inpute static with median
for (j in 3:ncol(static_df)){
curr_col <- static_df[,j]
na_indxes <- which(is.na(curr_col)==T)
if (length(na_indxes) > 0){
static_df[na_indxes,j] <- median(static_df[,j],na.rm = T)
}
}
#MAtch ID order
match_order <- match(avg_max_min_df[,"SAMPLE_ID"],static_df[,"SAMPLE_ID"])
comb_df <- cbind(static_df[match_order,-1],avg_max_min_df[,-1])
rownames(comb_df) <- comb_df$SAMPLE_ID
comb_df <- comb_df[,-1]
match_order2 <- match(label_df[,"SAMPLE_ID"],rownames(comb_df))
comb_df_withLabel <- cbind(comb_df,label_df[,c("sample_death_in24h")])
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)] <- "sample_death_in24h"
#########################################################
#Input df, remove duplicated rows
#########################################################
#remove duplicated rows for tSNE and PCA
comb_df_withLabel <- comb_df_withLabel[!duplicated(comb_df_withLabel[,-ncol(comb_df_withLabel)]),]
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
#Run PCA
res.pca <- PCA(input_df, graph = FALSE)
eig.val <- get_eigenvalue(res.pca)
#Get varaible contribution
var <- get_pca_var(res.pca)
var_contribution <- as.data.frame(var$contrib)
####################################################################################################
#Add weighted sum scores for each sample, based on the contribution of top 7 features on Dim 1
####################################################################################################
top7_features_contribution_df  <- var_contribution[order(var_contribution[,"Dim.1"],decreasing = T)[1:7],]
top7_features                  <- rownames(top7_features_contribution_df)
top7_features_contributions    <- top7_features_contribution_df[,"Dim.1"]
#Normalized feature values for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
colnames(normed_data) <- paste0("Normed_",colnames(normed_data))
comb_df_withLabel[,colnames(normed_data)] <- normed_data
#Compute weightes sum
comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] <- NA
for (i in 1:nrow(comb_df_withLabel)){
if (i %% 1000 == 0){print(i)}
curr_pt_vals <- comb_df_withLabel[i,paste0("Normed_",top7_features)]
curr_wss     <- sum(curr_pt_vals*top7_features_contributions) #weighted sum
comb_df_withLabel[i,"WeightedSumScore_Dim1Top7Fs"] <- curr_wss
}
wss_df <- comb_df_withLabel[, c(top7_features,
paste0("Normed_",top7_features),
"WeightedSumScore_Dim1Top7Fs",
"sample_death_in24h")]
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 20),]
table(wss_obv_neg_df$sample_death_in24h) #4411   152, ratio:29:1
####################################################################################################
#Check distribution of exclued samples feature values
####################################################################################################
summary(wss_obv_neg_df[,top7_features])
colnames(wss_df)
ggplot(wss_df, aes(x=WeightedSumScore_Dim1Top7Fs, fill=sample_death_in24h)) +
geom_histogram(binwidth=.5, position="dodge")
ggplot(wss_df, aes(x=WeightedSumScore_Dim1Top7Fs, color=sample_death_in24h)) +
geom_histogram(binwidth=.5, position="dodge")
ggplot(wss_df, aes(x=WeightedSumScore_Dim1Top7Fs, color=sample_death_in24h)) +
geom_histogram(binwidth=.5)
ggplot(wss_df, aes(x=WeightedSumScore_Dim1Top7Fs, color=sample_death_in24h,fill = sample_death_in24h)) +
geom_histogram(binwidth=.5)
wss_df$sample_death_in24h
wss_df$sample_death_in24h <- as.factor(wss_df$sample_death_in24h)
ggplot(wss_df, aes(x=WeightedSumScore_Dim1Top7Fs, color=sample_death_in24h,fill = sample_death_in24h)) +
geom_histogram(binwidth=.5)
ggplot(wss_df, aes(x=WeightedSumScore_Dim1Top7Fs, color=sample_death_in24h,fill = sample_death_in24h)) +
geom_histogram()
top7_features
outcome_col <- "sample_death_in24h"
feature_col1 <- "MIN_Scr"
feature_col2 <- "AVG_Bicarbonate"
feature_col3 <- "WeightedSumScore_Dim1Top7Fs"
comb_df_withLabel[,outcome_col] <- as.factor(comb_df_withLabel[,outcome_col])
top_fs
top_fs <- c(feature_col1,feature_col2,feature_col3)
top_fs
i<-3
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
p
comb_df_withLabel$WeightedSumScore_Dim1Top7Fs
comb_df_withLabel$sample_death_in24h
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
+ theme(legend.position="top")
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col,fill = outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col,fill = outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col,fill = outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlabel("Weighted Sum of Top 7 Contributed Features")
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col,fill = outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col,fill = outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
labs(fill = "Sample Death")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col,fill = outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
labs(fill = "Sample Death")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
labs(fill = "Sample Death")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
#xlab("Weighted Sum of Top 7 Contributed Features") +
labs(fill = "Sample Death")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
guides(fill=guide_legend(title="Sample Death"))
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
scale_fill_discrete(name="Sample Death")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
scale_fill_continuous(name="Sample Death")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
guides(fill=guide_legend(title="New Legend Title"))
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
#theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
guides(fill=guide_legend(title="New Legend Title"))
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
guides(fill=guide_legend(title="New Legend Title"))
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
guides(fill=guide_legend(title="New Legend Title"))
p
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 800)
print(p)
dev.off()
